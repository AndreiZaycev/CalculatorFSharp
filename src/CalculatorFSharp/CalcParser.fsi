// Signature file for parser generated by fsyacc
module CalcParser
type token = 
  | EOF
  | EQ
  | KW_PRINT
  | VNAME of (string)
  | RBR
  | LBR
  | RBRMOD
  | LBRMOD
  | Bin
  | DivRem
  | Pow
  | Mul
  | Div
  | Sub
  | Sum
  | NUM of (BigAriphmetics.BigInt)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_KW_PRINT
    | TOKEN_VNAME
    | TOKEN_RBR
    | TOKEN_LBR
    | TOKEN_RBRMOD
    | TOKEN_LBRMOD
    | TOKEN_Bin
    | TOKEN_DivRem
    | TOKEN_Pow
    | TOKEN_Mul
    | TOKEN_Div
    | TOKEN_Sub
    | TOKEN_Sum
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmt
    | NONTERM_expression
    | NONTERM_tExpression
    | NONTERM_factor
    | NONTERM_power
    | NONTERM_vname
    | NONTERM_eof
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Exp.Program ) 
